/// <reference types="react" />
import { type SymbolsElement } from '../store/Symbols';
import { type TagType } from '../store/Types';
export declare const Quote: {
    (props: {
        isNumber?: boolean | undefined;
    } & import("react").HTMLAttributes<HTMLElement>): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element | null;
    displayName: string;
};
export declare const ValueQuote: {
    (props: React.HTMLAttributes<HTMLElement>): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const Colon: {
    (): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const Arrow: {
    <T extends TagType>(props: {
        as?: T | undefined;
        render?: ((props: SymbolsElement<T>) => import("react").ReactNode) | undefined;
        'data-type'?: string | undefined;
    } & import("react").PropsWithoutRef<import("react").ComponentProps<T>> & {
        expandKey: string;
    }): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const BracketsOpen: {
    ({ isBrackets }: {
        isBrackets?: boolean | undefined;
    }): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
type BracketsCloseProps = {
    isBrackets?: boolean;
    isVisiable?: boolean;
};
export declare const BracketsClose: {
    ({ isBrackets, isVisiable }: BracketsCloseProps): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element | null;
    displayName: string;
};
export {};
