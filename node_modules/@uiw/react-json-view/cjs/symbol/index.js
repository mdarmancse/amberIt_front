"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValueQuote = exports.Quote = exports.Colon = exports.BracketsOpen = exports.BracketsClose = exports.Arrow = void 0;
var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _Symbols = require("../store/Symbols");
var _Expands = require("../store/Expands");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["isNumber"],
  _excluded2 = ["as", "render"],
  _excluded3 = ["as", "render"],
  _excluded4 = ["as", "render"],
  _excluded5 = ["as", "style", "render"],
  _excluded6 = ["as", "render"],
  _excluded7 = ["as", "render"],
  _excluded8 = ["as", "render"],
  _excluded9 = ["as", "render"];
var Quote = exports.Quote = function Quote(props) {
  var _useSymbolsStore = (0, _Symbols.useSymbolsStore)(),
    _useSymbolsStore$Quot = _useSymbolsStore.Quote,
    Comp = _useSymbolsStore$Quot === void 0 ? {} : _useSymbolsStore$Quot;
  var isNumber = props.isNumber,
    other = (0, _objectWithoutProperties2["default"])(props, _excluded);
  if (isNumber) return null;
  var as = Comp.as,
    render = Comp.render,
    reset = (0, _objectWithoutProperties2["default"])(Comp, _excluded2);
  var Elm = as || 'span';
  var elmProps = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, other), reset);
  var child = render && typeof render === 'function' && render(elmProps);
  if (child) return child;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Elm, (0, _objectSpread2["default"])({}, elmProps));
};
Quote.displayName = 'JVR.Quote';
var ValueQuote = exports.ValueQuote = function ValueQuote(props) {
  var _useSymbolsStore2 = (0, _Symbols.useSymbolsStore)(),
    _useSymbolsStore2$Val = _useSymbolsStore2.ValueQuote,
    Comp = _useSymbolsStore2$Val === void 0 ? {} : _useSymbolsStore2$Val;
  var other = (0, _extends2["default"])({}, ((0, _objectDestructuringEmpty2["default"])(props), props));
  var as = Comp.as,
    render = Comp.render,
    reset = (0, _objectWithoutProperties2["default"])(Comp, _excluded3);
  var Elm = as || 'span';
  var elmProps = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, other), reset);
  var child = render && typeof render === 'function' && render(elmProps);
  if (child) return child;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Elm, (0, _objectSpread2["default"])({}, elmProps));
};
ValueQuote.displayName = 'JVR.ValueQuote';
var Colon = exports.Colon = function Colon() {
  var _useSymbolsStore3 = (0, _Symbols.useSymbolsStore)(),
    _useSymbolsStore3$Col = _useSymbolsStore3.Colon,
    Comp = _useSymbolsStore3$Col === void 0 ? {} : _useSymbolsStore3$Col;
  var as = Comp.as,
    render = Comp.render,
    reset = (0, _objectWithoutProperties2["default"])(Comp, _excluded4);
  var Elm = as || 'span';
  var child = render && typeof render === 'function' && render(reset);
  if (child) return child;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Elm, (0, _objectSpread2["default"])({}, reset));
};
Colon.displayName = 'JVR.Colon';
var Arrow = exports.Arrow = function Arrow(props) {
  var _useSymbolsStore4 = (0, _Symbols.useSymbolsStore)(),
    _useSymbolsStore4$Arr = _useSymbolsStore4.Arrow,
    Comp = _useSymbolsStore4$Arr === void 0 ? {} : _useSymbolsStore4$Arr;
  var expands = (0, _Expands.useExpandsStore)();
  var expandKey = props.expandKey;
  var isExpanded = !!expands[expandKey];
  var as = Comp.as,
    style = Comp.style,
    render = Comp.render,
    reset = (0, _objectWithoutProperties2["default"])(Comp, _excluded5);
  var Elm = as || 'span';
  var isRender = render && typeof render === 'function';
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    'data-expanded': isExpanded,
    style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, style), props.style)
  }));
  if (child) return child;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Elm, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, style), props.style)
  }));
};
Arrow.displayName = 'JVR.Arrow';
var BracketsOpen = exports.BracketsOpen = function BracketsOpen(_ref) {
  var isBrackets = _ref.isBrackets;
  var _useSymbolsStore5 = (0, _Symbols.useSymbolsStore)(),
    _useSymbolsStore5$Bra = _useSymbolsStore5.BracketsLeft,
    BracketsLeft = _useSymbolsStore5$Bra === void 0 ? {} : _useSymbolsStore5$Bra,
    _useSymbolsStore5$Bra2 = _useSymbolsStore5.BraceLeft,
    BraceLeft = _useSymbolsStore5$Bra2 === void 0 ? {} : _useSymbolsStore5$Bra2;
  if (isBrackets) {
    var as = BracketsLeft.as,
      _render = BracketsLeft.render,
      reset = (0, _objectWithoutProperties2["default"])(BracketsLeft, _excluded6);
    var BracketsLeftComp = as || 'span';
    var _child = _render && typeof _render === 'function' && _render(reset);
    if (_child) return _child;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(BracketsLeftComp, (0, _objectSpread2["default"])({}, reset));
  }
  var elm = BraceLeft.as,
    render = BraceLeft.render,
    props = (0, _objectWithoutProperties2["default"])(BraceLeft, _excluded7);
  var BraceLeftComp = elm || 'span';
  var child = render && typeof render === 'function' && render(props);
  if (child) return child;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(BraceLeftComp, (0, _objectSpread2["default"])({}, props));
};
BracketsOpen.displayName = 'JVR.BracketsOpen';
var BracketsClose = exports.BracketsClose = function BracketsClose(_ref2) {
  var isBrackets = _ref2.isBrackets,
    isVisiable = _ref2.isVisiable;
  if (!isVisiable) return null;
  var _useSymbolsStore6 = (0, _Symbols.useSymbolsStore)(),
    _useSymbolsStore6$Bra = _useSymbolsStore6.BracketsRight,
    BracketsRight = _useSymbolsStore6$Bra === void 0 ? {} : _useSymbolsStore6$Bra,
    _useSymbolsStore6$Bra2 = _useSymbolsStore6.BraceRight,
    BraceRight = _useSymbolsStore6$Bra2 === void 0 ? {} : _useSymbolsStore6$Bra2;
  if (isBrackets) {
    var as = BracketsRight.as,
      _render2 = BracketsRight.render,
      _reset = (0, _objectWithoutProperties2["default"])(BracketsRight, _excluded8);
    var BracketsRightComp = as || 'span';
    var _child2 = _render2 && typeof _render2 === 'function' && _render2(_reset);
    if (_child2) return _child2;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(BracketsRightComp, (0, _objectSpread2["default"])({}, _reset));
  }
  var elm = BraceRight.as,
    render = BraceRight.render,
    reset = (0, _objectWithoutProperties2["default"])(BraceRight, _excluded9);
  var BraceRightComp = elm || 'span';
  var child = render && typeof render === 'function' && render(reset);
  if (child) return child;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(BraceRightComp, (0, _objectSpread2["default"])({}, reset));
};
BracketsClose.displayName = 'JVR.BracketsClose';