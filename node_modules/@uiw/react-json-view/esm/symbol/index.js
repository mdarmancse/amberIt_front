import _objectDestructuringEmpty from "@babel/runtime/helpers/objectDestructuringEmpty";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["isNumber"],
  _excluded2 = ["as", "render"],
  _excluded3 = ["as", "render"],
  _excluded4 = ["as", "render"],
  _excluded5 = ["as", "style", "render"],
  _excluded6 = ["as", "render"],
  _excluded7 = ["as", "render"],
  _excluded8 = ["as", "render"],
  _excluded9 = ["as", "render"];
import { useSymbolsStore } from '../store/Symbols';
import { useExpandsStore } from '../store/Expands';
import { jsx as _jsx } from "react/jsx-runtime";
export var Quote = props => {
  var {
    Quote: Comp = {}
  } = useSymbolsStore();
  var {
      isNumber
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  if (isNumber) return null;
  var {
      as,
      render
    } = Comp,
    reset = _objectWithoutPropertiesLoose(Comp, _excluded2);
  var Elm = as || 'span';
  var elmProps = _extends({}, other, reset);
  var child = render && typeof render === 'function' && render(elmProps);
  if (child) return child;
  return /*#__PURE__*/_jsx(Elm, _extends({}, elmProps));
};
Quote.displayName = 'JVR.Quote';
export var ValueQuote = props => {
  var {
    ValueQuote: Comp = {}
  } = useSymbolsStore();
  var other = _extends({}, (_objectDestructuringEmpty(props), props));
  var {
      as,
      render
    } = Comp,
    reset = _objectWithoutPropertiesLoose(Comp, _excluded3);
  var Elm = as || 'span';
  var elmProps = _extends({}, other, reset);
  var child = render && typeof render === 'function' && render(elmProps);
  if (child) return child;
  return /*#__PURE__*/_jsx(Elm, _extends({}, elmProps));
};
ValueQuote.displayName = 'JVR.ValueQuote';
export var Colon = () => {
  var {
    Colon: Comp = {}
  } = useSymbolsStore();
  var {
      as,
      render
    } = Comp,
    reset = _objectWithoutPropertiesLoose(Comp, _excluded4);
  var Elm = as || 'span';
  var child = render && typeof render === 'function' && render(reset);
  if (child) return child;
  return /*#__PURE__*/_jsx(Elm, _extends({}, reset));
};
Colon.displayName = 'JVR.Colon';
export var Arrow = props => {
  var {
    Arrow: Comp = {}
  } = useSymbolsStore();
  var expands = useExpandsStore();
  var {
    expandKey
  } = props;
  var isExpanded = !!expands[expandKey];
  var {
      as,
      style,
      render
    } = Comp,
    reset = _objectWithoutPropertiesLoose(Comp, _excluded5);
  var Elm = as || 'span';
  var isRender = render && typeof render === 'function';
  var child = isRender && render(_extends({}, reset, {
    'data-expanded': isExpanded,
    style: _extends({}, style, props.style)
  }));
  if (child) return child;
  return /*#__PURE__*/_jsx(Elm, _extends({}, reset, {
    style: _extends({}, style, props.style)
  }));
};
Arrow.displayName = 'JVR.Arrow';
export var BracketsOpen = _ref => {
  var {
    isBrackets
  } = _ref;
  var {
    BracketsLeft = {},
    BraceLeft = {}
  } = useSymbolsStore();
  if (isBrackets) {
    var {
        as,
        render: _render
      } = BracketsLeft,
      reset = _objectWithoutPropertiesLoose(BracketsLeft, _excluded6);
    var BracketsLeftComp = as || 'span';
    var _child = _render && typeof _render === 'function' && _render(reset);
    if (_child) return _child;
    return /*#__PURE__*/_jsx(BracketsLeftComp, _extends({}, reset));
  }
  var {
      as: elm,
      render
    } = BraceLeft,
    props = _objectWithoutPropertiesLoose(BraceLeft, _excluded7);
  var BraceLeftComp = elm || 'span';
  var child = render && typeof render === 'function' && render(props);
  if (child) return child;
  return /*#__PURE__*/_jsx(BraceLeftComp, _extends({}, props));
};
BracketsOpen.displayName = 'JVR.BracketsOpen';
export var BracketsClose = _ref2 => {
  var {
    isBrackets,
    isVisiable
  } = _ref2;
  if (!isVisiable) return null;
  var {
    BracketsRight = {},
    BraceRight = {}
  } = useSymbolsStore();
  if (isBrackets) {
    var {
        as,
        render: _render2
      } = BracketsRight,
      _reset = _objectWithoutPropertiesLoose(BracketsRight, _excluded8);
    var BracketsRightComp = as || 'span';
    var _child2 = _render2 && typeof _render2 === 'function' && _render2(_reset);
    if (_child2) return _child2;
    return /*#__PURE__*/_jsx(BracketsRightComp, _extends({}, _reset));
  }
  var {
      as: elm,
      render
    } = BraceRight,
    reset = _objectWithoutPropertiesLoose(BraceRight, _excluded9);
  var BraceRightComp = elm || 'span';
  var child = render && typeof render === 'function' && render(reset);
  if (child) return child;
  return /*#__PURE__*/_jsx(BraceRightComp, _extends({}, reset));
};
BracketsClose.displayName = 'JVR.BracketsClose';